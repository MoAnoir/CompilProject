/* SQLParser.java */
/* Generated By:JavaCC: Do not edit this line. SQLParser.java */
package test1;

import java.util.*;
import java.io.*;

public class SQLParser implements SQLParserConstants {
    private StringBuilder sql;
    private Map<String, List<String>> foreignKeys;

    {
        sql = new StringBuilder();
        foreignKeys = new HashMap<String, List<String>>();
    }

    public static void main(String[] args) throws ParseException {
        if (args.length == 0) {
            System.err.println("Erreur : Veuillez sp\u00e9cifier un fichier d'entr\u00e9e.");
            return;
        }
         Scanner scanner = new Scanner(System.in);
        System.out.print("Veuillez entrer le chemin du fichier d'entr\u00e9e : ");
        String filePath = scanner.nextLine();

        String inputFile = "C:\\Users\\Dell\\Desktop\\input.txt";

        try (FileInputStream fis = new FileInputStream(filePath)) {
            SQLParser parser = new SQLParser(fis);
            parser.Parse();
            System.out.println(parser.getGeneratedSQL());
        } catch (FileNotFoundException e) {
            System.err.println("Erreur : Fichier non trouv\u00e9 - " + e.getMessage());
        } catch (IOException e) {
            System.err.println("Erreur d'E/S - " + e.getMessage());
        } catch (ParseException e) {
            System.err.println("Erreur de parsing - " + e.getMessage());
        }
    }

    public String getGeneratedSQL() {
        return sql.toString();
    }

  final public void Parse() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TABLE:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      TableDefinition();
    }
    jj_consume_token(0);
for (Map.Entry<String, List<String>> entry : foreignKeys.entrySet()) {
            sql.append("ALTER TABLE ").append(entry.getKey())
               .append(" ADD ").append(String.join(",\n", entry.getValue()))
               .append(";\n");
        }
}

  final public void TableDefinition() throws ParseException {Token tableName;
    jj_consume_token(TABLE);
    tableName = jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
sql.append("CREATE TABLE ").append(tableName.image).append(" (\n");
    ColumnList(tableName.image);
sql.append("\n);\n\n");
}

  final public void ColumnList(String tableName) throws ParseException {List<String> columns = new ArrayList<String>();
    List<String> foreignKeys = new ArrayList<String>();
    String column;
    label_2:
    while (true) {
      jj_consume_token(DASH);
column = Column(tableName, foreignKeys);
            if (column != null && !column.trim().isEmpty()) {
                columns.add(column);
            }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DASH:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
    }
sql.append(String.join(",\n", columns));
        if (!foreignKeys.isEmpty()) {
            sql.append(",\n").append(String.join(",\n", foreignKeys));
        }
}

  final public String Column(String tableName, List<String> foreignKeys) throws ParseException {Token columnName;
    StringBuilder columnDef = new StringBuilder();
    boolean isPrimaryKey = false;
    boolean isAutoIncrement = false;
    columnName = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
columnDef.append("    ").append(columnName.image).append(" ");
    DataType(columnDef);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRIMARY_KEY:{
        PrimaryKey();
isPrimaryKey = true;
        break;
        }
      case AUTO:{
        Auto();
isAutoIncrement = true;
        break;
        }
      case REQUIRED:{
        Required(columnDef);
        break;
        }
      case UNIQUE:{
        Unique(columnDef);
        break;
        }
      case DEFAULT_VALUE:{
        DefaultValue(columnDef);
        break;
        }
      case REFERENCE:{
        ReferenceInline(tableName, columnName.image, foreignKeys);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RPAREN);
if (isPrimaryKey) {
            columnDef.append(" PRIMARY KEY");
            if (isAutoIncrement) {
                columnDef.append(" AUTO_INCREMENT");
            }
        }
        {if ("" != null) return columnDef.toString();}
    throw new Error("Missing return statement in function");
}

  final public void ReferenceInline(String tableName, String columnName, List<String> foreignKeys) throws ParseException {Token refTable, refColumn;
    jj_consume_token(REFERENCE);
    jj_consume_token(COLON);
    refTable = jj_consume_token(IDENTIFIER);
    jj_consume_token(DOT);
    refColumn = jj_consume_token(IDENTIFIER);
String foreignKey = String.format("    FOREIGN KEY (%s) REFERENCES %s(%s)",
            columnName, refTable.image, refColumn.image);
        foreignKeys.add(foreignKey);
}

  final public void DataType(StringBuilder columnDef) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      jj_consume_token(INTEGER);
columnDef.append("INTEGER");
      break;
      }
    case TEXT:{
      jj_consume_token(TEXT);
columnDef.append("VARCHAR(255)");
      break;
      }
    case DATE:{
      jj_consume_token(DATE);
columnDef.append("DATE");
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void PrimaryKey() throws ParseException {
    jj_consume_token(PRIMARY_KEY);
}

  final public void Auto() throws ParseException {
    jj_consume_token(AUTO);
}

  final public void Required(StringBuilder columnDef) throws ParseException {
    jj_consume_token(REQUIRED);
columnDef.append(" NOT NULL");
}

  final public void Unique(StringBuilder columnDef) throws ParseException {
    jj_consume_token(UNIQUE);
columnDef.append(" UNIQUE");
}

  final public void DefaultValue(StringBuilder columnDef) throws ParseException {
    jj_consume_token(DEFAULT_VALUE);
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOW:{
      jj_consume_token(NOW);
columnDef.append(" DEFAULT CURRENT_TIMESTAMP");
      break;
      }
    case TODAY:{
      jj_consume_token(TODAY);
columnDef.append(" DEFAULT CURRENT_DATE");
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Reference(String tableName, String columnName) throws ParseException {Token refTable, refColumn;
    jj_consume_token(REFERENCE);
    jj_consume_token(COLON);
    refTable = jj_consume_token(IDENTIFIER);
    jj_consume_token(DOT);
    refColumn = jj_consume_token(IDENTIFIER);
String foreignKey = String.format("    FOREIGN KEY (%s) REFERENCES %s(%s)",
            columnName, refTable.image, refColumn.image);

        List<String> tableKeys = foreignKeys.get(tableName);
        if (tableKeys == null) {
            tableKeys = new ArrayList<String>();
            foreignKeys.put(tableName, tableKeys);
        }
        tableKeys.add(foreignKey);
}

  /** Generated Token Manager. */
  public SQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x20,0x80,0x400,0x27c000,0x3800,0x180000,};
	}

  /** Constructor with InputStream. */
  public SQLParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SQLParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new SQLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SQLParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new SQLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new SQLParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SQLParser(SQLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SQLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[24];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 6; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 24; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
